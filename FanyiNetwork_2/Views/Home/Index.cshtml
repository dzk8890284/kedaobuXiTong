@{
    Layout = "_Layout";
}

@section styles{
    <style type="text/css">
        .ivu-card {
            display: block;
            margin-bottom: 16px;
        }

        .overdue {
            color: red;
            font-weight: bold;
        }

        .cardLink:link, .cardLink:visited, .cardLink:hover, .cardLink:active {
            color: #000000;
            display: block;
        }

        .searchText {
            width: 66.5%;
        }
        .overflow {
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }
    </style>
}

<i-menu mode="horizontal" active-name="1">
    <div class="layout-assistant">
        @if (User.HasClaim(x => x.Type == System.Security.Claims.ClaimTypes.Role && (x.Value == "客服主管" || x.Value == "客服部" || x.Value == "经理办" || x.Value == "人事部" || x.Value == "课导部主管")))
        {
            <Menu-item name="1" @@click.native="All()">全部</Menu-item>
            <Menu-item name="2" @@click.native="status='待分配'">待分配</Menu-item>
            <Menu-item name="3" @@click.native="status='进行中'">进行中</Menu-item>
            <Menu-item name="4" @@click.native="status='已完成'">已完成</Menu-item>
        }
        else
        {
            <Menu-item name="1" @@click.native="All()">全部</Menu-item>
            <Menu-item name="2" @@click.native="status='进行中'">进行中</Menu-item>
            <Menu-item name="3" @@click.native="status='已完成'">已完成</Menu-item>
        }
    </div>
</i-menu>

<div class="layout-content">
    <div class="container">
        <i-input class="searchText" v-model="searchText" placeholder="请输入需要查询订单号码或者课程名称" @@on-change="fetchData()" @@on-enter="redirect"></i-input>
        <span style="float:right;">
            <i-select v-model="typeswitch" style="width:100px" placeholder="类型切换" @@on-change="fetchData">
                <i-option :value="0" :key="0">类型切换</i-option>
                <i-option v-for="item in typeswitchs" :value="item.name" :key="item.name">{{ item.name }}</i-option>
            </i-select>
            @if (User.HasClaim(x => x.Type == System.Security.Claims.ClaimTypes.Role && (x.Value == "课导部" || x.Value == "客服部" || x.Value == "客服主管" || x.Value == "课导部主管" || x.Value == "经理办" || x.Value == "人事部")))
            {
                <i-select v-model="teacher" style="width:100px" placeholder="请选择助教" @@on-change="fetchData">
                    <i-option :value="0" :key="0">负责助教</i-option>
                    <i-option v-for="item in teachers" :value="item.id" :key="item.id">{{ item.name }}</i-option>
                </i-select>
            }
            @if (User.HasClaim(x => x.Type == System.Security.Claims.ClaimTypes.Role && (x.Value == "客服部" || x.Value == "客服主管" || x.Value == "课导部" || x.Value == "课导部主管" || x.Value == "经理办" || x.Value == "人事部")))
            {
                <i-select v-model="cs" style="width:100px" placeholder="请选择客服" @@on-change="fetchData">
                    <i-option :value="0" :key="0">负责客服</i-option>
                    <i-option v-for="item in css" :value="item.id" :key="item.id">{{ item.name }}</i-option>
                </i-select>
            }
        </span>
    </div>

    <div class="container" style="max-width:960px">
        <Row :gutter="8">
            <i-col :xs="24" :sm="24" :md="8" :lg="8" v-for="classorder in filter(classorders)">
                <a class="cardLink" :href="'/classorder/detail' + '?id=' + classorder.classOrderDetails.id">
                    <Card :bordered="true">
                        <p slot="title" >
                            <Tag style="float:left" v-if="classorder.classOrderDetails.ordertape == '回顾资料'" color="yellow">回顾</Tag>
                            <Tag style="float:left" v-else-if="classorder.classOrderDetails.ordertape == '课程订单'" color="blue">订单</Tag>
                            <span>{{ classorder.classinfo.name}}</span>
                            <span style="font-weight:700;float:right">{{ classorder.classOrderDetails.id }}</span>
                        </p>
                        <p>订单状态：<span>{{ classorder.classOrderDetails.status }} &nbsp; </span></p>
                        <p class="overflow">大学名称：<span>{{classorder.classinfo.university}}</span></p>
                        <p>客户昵称：<span>{{ Clientname(classorder.clientname) }}</span></p>
                        <p v-if="classorder.classOrderDetails.ordertape == '回顾资料'">负责人：{{DisplayName(classorder.teacher) }}</p>
                        <p v-else="classorder.classOrderDetails.ordertape == '课程订单'">负责助教：{{DisplayName(classorder.teacher) }}&nbsp;负责客服：{{ DisplayName(classorder.cs) }}  </p>
                        <p>最后更新时间：{{formatTime(classorder.classOrderDetails.lastUpdate)}}</p>
                    </Card>
                </a>
            </i-col>
        </Row>
    </div>

</div>
@section scripts{
    <script>

        moment.locale("zh-cn");

        new Vue({
            el: '#app',
            data: {
                //订单状态
                status: "",
                //搜索的内容
                searchText: '',
                //类型切换
                typeswitch: 0,
                typeswitchs: [
                    {
                        name: '课程订单'
                    },
                    {
                        name: '回顾资料'
                    }
                ],
                //助教
                teacher: 0,
                teachers: [],
                //客服
                cs: 0,
                css: [],
                //判断状态
                notifications: [],
                notification_dpd: false,
                notification_djg: false,
                notification_dfs: false,
                //页面的主数据
                classorders: [],
                //判断输入的ID是否跟订单一样
                searchTextId: []
            },
            created: function () {
                this.fetchData();
                this.fetchPeople();
                var _this = this;
                console.log(_this);
                setInterval(function () {
                    _this.fetchData();
                }, 3200);
            },
            methods: {
                //回车事件，回车跳转到订单页面
                redirect: function () {
                    var _this = this;
                    for (i = 0; i < _this.classorders.length; i++) {
                        _this.searchTextId = _this.classorders[i].classOrderDetails.id;
                        if (_this.searchText == _this.searchTextId) {
                            window.location.href = "/ClassOrder/Detail?id=" + _this.searchText;
                        }
                        else {
                            return;
                        }
                    }
                },
                //订单状态
                All: function () {
                    this.status = '';
                    this.searchText = '';
                },
                //查询助教和客服
                fetchPeople: function () {
                    var _this = this;
                    axios.get("/api/user/group/负责助教").then(function (response) {
                        _this.teachers = response.data;
                    }).catch(function (error) {
                        console.log(error);
                    });
                    axios.get("/api/user/group/负责客服").then(function (response) {
                        _this.css = response.data;
                    }).catch(function (error) {
                        console.log(error);
                    });
                },
                //根据助教，客服，订单ID查询并添加到当前页面（classorders）
                fetchData: function () {
                    var _this = this;
                    axios.get("/api/home", {
                        params: {
                            teacher: _this.teacher,
                            cs: _this.cs,
                            orderid: _this.searchText,
                            type: _this.typeswitch
                        }
                    }).then(function (response) {
                        _this.classorders = response.data;
                    }).catch(function (error) {
                        console.log(error);
                    });
                },
                //过滤器（用于判断分配，进行，完成的状态）
                filter: function (list) {
                    var _this = this;
                    if (this.status != '') {
                        list = list.filter(function (item) {
                            return item.classOrderDetails.status == _this.status;
                        });
                    }
                    return list;
                },
                //过滤器（格式化更新时间）
                formatTime: function (val) {
                    if (val == "0001-01-01T00:00:00") {
                        return "暂无更新时间";
                    } else {
                        return moment(val).format("lll");
                    }
                },
                //过滤器（判断订单是否有助教和客服，没有的则改为未分配）
                DisplayName: function (record) {
                    if (record != null) {
                        return record.name;
                    }
                    else {
                        return "未分配";
                    }
                },
                //过滤器
                Clientname: function (val) { 
                    if (val != null) { 
                        return val;
                    } else {
                        return "无";

                    }
                }
            }
        })
    </script>
}